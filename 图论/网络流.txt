const int MX = 300 + 5;
const int INF = 0x3f3f3f3f;
/*复杂度O(n^2*m)
下标从0开始
*/
int maze[MX][MX];
int gap[MX], dis[MX], pre[MX], cur[MX];

int sap(int start, int end, int nodenum) {
    memset(cur, 0, sizeof(cur));
    memset(dis, 0, sizeof(dis));
    memset(gap, 0, sizeof(gap));
    int u = pre[start] = start, maxflow = 0, aug = -1;
    gap[0] = nodenum;
    while(dis[start] < nodenum) {
loop:
        for(int v = cur[u]; v < nodenum; v++) {
            if(maze[u][v] && dis[u] == dis[v] + 1) {
                if(aug == -1 || aug > maze[u][v]) aug = maze[u][v];
                pre[v] = u; u = cur[u] = v;
                if(v == end) {
                    maxflow += aug;
                    for(u = pre[u]; v != start; v = u, u = pre[u]) {
                        maze[u][v] -= aug;
                        maze[v][u] += aug;
                    }
                    aug = -1;
                }
                goto loop;
            }
        }
        int mindis = nodenum - 1;
        for(int v = 0; v < nodenum; v++) {
            if(maze[u][v] && mindis > dis[v]) {
                cur[u] = v;
                mindis = dis[v];
            }
        }
        if((--gap[dis[u]]) == 0) break;
        gap[dis[u] = mindis + 1]++;
        u = pre[u];
    }
    return maxflow;
}