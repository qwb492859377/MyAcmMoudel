利用递推公式
const int MX=100;
LL C[MX][MX];

C[0][0]=1;
for(int i=1;i<MX;i++){
    C[i][0]=C[i][i]=1;
    for(int j=1;j<i;j++){
        C[i][j]=(C[i-1][j-1]+C[i-1][j])%mod;
    }
}

/*利用费马小定理*/
const int MX = 1000000 + 5;
const int mod = 1e9 + 7;

LL F[MX], invF[MX];

LL power(LL a, LL b) {
    LL ret = 1;
    while(b) {
        if(b & 1) ret = (ret * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ret;
}

void init() {
    F[0] = 1;
    for(int i = 1; i < MX; i++) {
        F[i] = (F[i - 1] * i) % mod;
    }
    invF[MX - 1] = power(F[MX - 1], mod - 2);
    for(int i = MX - 2; i >= 0; i--) {
        invF[i] = invF[i + 1] * (i + 1) % mod;
    }
}

LL C(int n, int m) {
    if(n < 0 || m < 0 || m > n) return 0;
    if(m == 0 || m == n)    return 1;
    return F[n] * invF[n - m] % mod * invF[m] % mod;
}

LL A(int n, int m) {
    if(n < 0 || m < 0 || m > n) return 0;
    return F[n] * invF[n - m] % mod;
}
