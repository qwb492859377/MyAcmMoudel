/*
复杂度O(nlogn)
n自动+1无需再管，返回的SA,R,H的下标都是0~n
其中多包括了一个空字符串
SA后缀数组，R名次数组，H高度数组
H[i]表示SA[i]和SA[i-1]的lcp
*/
char s[MX];
int SA[MX], R[MX], H[MX];
int wa[MX], wb[MX], wv[MX], wc[MX];
int cmp(int *r, int a, int b, int l) {
    return r[a] == r[b] && r[a + l] == r[b + l];
}
void Suffix(char *r, int m = 128) {
    int n = strlen(r) + 1;
    int i, j, p, *x = wa, *y = wb, *t;
    for(i = 0; i < m; i++) wc[i] = 0;
    for(i = 0; i < n; i++) wc[x[i] = r[i]]++;
    for(i = 1; i < m; i++) wc[i] += wc[i - 1];
    for(i = n - 1; i >= 0; i--) SA[--wc[x[i]]] = i;
    for(j = 1, p = 1; p < n; j *= 2, m = p) {
        for(p = 0, i = n - j; i < n; i++) y[p++] = i;
        for(i = 0; i < n; i++) if(SA[i] >= j) y[p++] = SA[i] - j;
        for(i = 0; i < n; i++) wv[i] = x[y[i]];
        for(i = 0; i < m; i++) wc[i] = 0;
        for(i = 0; i < n; i++) wc[wv[i]]++;
        for(i = 1; i < m; i++) wc[i] += wc[i - 1];
        for(i = n - 1; i >= 0; i--) SA[--wc[wv[i]]] = y[i];
        for(t = x, x = y, y = t, p = 1, x[SA[0]] = 0, i = 1; i < n; i++) {
            x[SA[i]] = cmp(y, SA[i - 1], SA[i], j) ? p - 1 : p++;
        }
    }
    int k = 0; n--;
    for(i = 0; i <= n; i++) R[SA[i]] = i;
    for(i = 0; i < n; i++) {
        if(k) k--;
        j = SA[R[i] - 1];
        while(r[i + k] == r[j + k]) k++;
        H[R[i]] = k;
    }
}
