const int MX = 1e5 + 5;
 
char op[MX];
int lch[MX], rch[MX], s[MX], r;
 
int build(char *S, int L, int R) {
    int c[] = { -1, -1}, p = 0, u;
 
    int sum = 0, sign = true;
    for(int i = L; i <= R; i++) {
        if(isdigit(S[i])) sum = sum * 10 + S[i] - '0';
        else {
            sign = false;
            break;
        }
    }
 
    if(sign) {
        u = ++r;
        op[u] = '.';
        s[u] = sum;
        return u;
    }
 
    for(int i = L; i <= R; i++) {
        switch(S[i]) {
        case '(': p++; break;
        case ')': p--; break;
        case '+': case '-': if(!p) c[0] = i; break;
        case '*': case '/': if(!p) c[1] = i; break;
        }
    }
 
    if(c[0] < 0) c[0] = c[1];
    if(c[0] < 0) u = build(S, L + 1, R - 1);
    else {
        u = ++r;
        op[u] = S[c[0]];
        lch[u] = build(S, L, c[0] - 1);
        rch[u] = build(S, c[0] + 1, R);
    }
    return u;
}
 
double solve(int u) {
    if(op[u] == '.') return s[u];
    double al = solve(lch[u]), ar = solve(rch[u]);
    switch(op[u]) {
    case '+': return al + ar;
    case '-': return al - ar;
    case '*': return al * ar;
    case '/': return al / ar;
    }
}