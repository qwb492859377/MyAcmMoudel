/*复杂度
取最小O(1)
合并O(logn)
这个是最小堆，求最大堆改merge即可
*/
const int MX = 1000 + 5;

struct Data {
    int l, r, key, dist;
} D[MX << 1];
int rear, root;

int lt_init() {
    rear = root = 0;
    D[0].dist = -1;
}
int lt_new(int _key = 0) {
    rear++;
    D[rear].l = D[rear].r = 0;
    D[rear].key = _key;
    D[rear].dist = 0;
    return rear;
}
int lt_merge(int r1, int r2) {
    if(!r1) return r2;
    if(!r2) return r1;
    if(D[r1].key > D[r2].key) {
        swap(r1, r2);
    }
    D[r1].r = lt_merge(D[r1].r, r2);
    if(D[D[r1].l].dist < D[D[r1].r].dist) {
        swap(D[r1].l, D[r1].r);
    }
    D[r1].dist = D[D[r1].r].dist + 1;
    return r1;
}
int lt_pop(int &rt) {
    int ret = D[rt].key;
    rt = lt_merge(D[rt].l, D[rt].r);
    return ret;
};
void lt_push(int &rt, int key) {
    rt = lt_merge(rt, lt_new(key));
}

/*使用的时候
lt_init();
lt_push(rt,1);
*/