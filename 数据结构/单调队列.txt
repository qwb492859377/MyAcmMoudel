#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<stack>
#include<queue>
#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define fuck(x) cout<<"["<<x<<"]"
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)
using namespace std;
typedef long long LL;

const int MX = 1e6 + 5;
const int INF = 0x3f3f3f3f;

int A[MX];
int Q_1[MX], cur_1, tail_1;//Min
int Q_2[MX], cur_2, tail_2;//Max
int MIN[MX], MAX[MX];

=
int main() {
    int n, k; //FIN;
    while(~scanf("%d%d", &n, &k)) {
        k = min(n, k);
        cur_1 = tail_1 = cur_2 = tail_2 = 0;
        for(int i = 1; i <= n; i++) {
            A[i] = read();
        }

        for(int i = 1; i <= n; i++) {
            while(cur_1 < tail_1 && A[Q_1[tail_1 - 1]] > A[i]) tail_1--; Q_1[tail_1++] = i;
            while(cur_2 < tail_2 && A[Q_2[tail_2 - 1]] < A[i]) tail_2--; Q_2[tail_2++] = i;
            if(i >= k) {
                while(cur_1 < tail_1 && Q_1[cur_1] < i - k + 1) cur_1++;
                while(cur_2 < tail_2 && Q_2[cur_2] < i - k + 1) cur_2++;
                MIN[i - k + 1] = A[Q_1[cur_1]];
                MAX[i - k + 1] = A[Q_2[cur_2]];
            }
        }

        for(int i = 1; i <= n - k + 1; i++) {
            printf("%d%c", MIN[i], i == n - k + 1 ? '\n' : ' ');
        }
        for(int i = 1; i <= n - k + 1; i++) {
            printf("%d%c", MAX[i], i == n - k + 1 ? '\n' : ' ');
        }
    }
    return 0;
}
