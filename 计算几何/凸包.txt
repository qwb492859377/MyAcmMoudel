#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;
typedef long long LL;
const int MX = 10000 + 5;

struct Node {
    double x, y;
    bool operator<(const Node&b) const {
        if(x == b.x) return y < b.y;
        return x < b.x;
    }
} P[MX], R[MX];

double cross(Node a, Node b, Node c) {
    return ((b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y));
}

int convex(int n) {
    int m = 0, k;
    sort(P, P + n);
    for(int i = 0; i < n; i++) {
        while(m > 1 && cross(R[m - 1], P[i], R[m - 2]) <= 0) m--;
        R[m++] = P[i];
    }

    k = m;
    for(int i = n - 2; i >= 0; i--) {
        while(m > k && cross(R[m - 1], P[i], R[m - 2]) <= 0) m--;
        R[m++] = P[i];
    }
    if(n > 1) m--;
    return m;
}

double length(Node a, Node b) {
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

int main() {
    int n;
    while(~scanf("%d", &n)) {
        for(int i = 0; i < n; i++) {
            scanf("%lf%lf", &P[i].x, &P[i].y);
        }
        if(n == 0 || n == 1) {
            printf("0.00\n");
            continue;
        }

        int rear = convex(n);
        double ans = 0;
        for(int i = 1; i < rear; i++) {
            ans += length(R[i], R[i - 1]);
        }
        ans += length(R[rear - 1], R[0]);
        printf("%.2lf\n", ans);
    }
    return 0;
}
